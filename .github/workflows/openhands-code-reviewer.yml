name: Auto-Review PR with OpenHands

on:
  workflow_call:
    inputs:
      max_iterations:
        required: false
        type: number
        default: 50
      review_macro:
        required: false
        type: string
        default: "@openhands-reviewer"
      review_level:
        required: false
        type: string
        default: "line" # Default changed to line
        description: "Level of review (e.g., 'line', 'file', 'pr')"
      review_depth:
        required: false
        type: string
        default: "deep" # Default changed to deep
        description: "Depth of review (e.g., 'quick', 'deep')"
      LLM_MODEL:
        required: false
        type: string
        default: "anthropic/claude-3-5-sonnet-20241022"
      LLM_API_VERSION:
        required: false
        type: string
        default: ""
      base_container_image:
        required: false
        type: string
        default: ""
        description: "Custom sandbox env"
    secrets:
      LLM_MODEL:
        required: false
      LLM_API_KEY:
        required: true
      APP_ID:
        required: false
      APP_PRIVATE_KEY:
        required: false
      LLM_BASE_URL:
        required: false
      PAT_TOKEN:
        required: false
      PAT_USERNAME:
        required: false

  pull_request:
    types: [opened, synchronize, reopened, labeled]
  issue_comment: # Triggered when a comment is made on a PR (issues are treated as PRs in GitHub API for comments)
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read # Read repo contents
  pull-requests: write # Write comments/reviews
  issues: write # Write comments (needed for issue_comment trigger on PRs)

jobs:
  auto-review:
    permissions:
      contents: read
      pull-requests: write # Change to 'write' if the bot needs to post comments
    if: |
      github.event_name == 'workflow_call' ||
      (
        github.event_name == 'pull_request' &&
        (
          github.event.action == 'opened' ||
          github.event.action == 'reopened' ||
          github.event.action == 'synchronize'
        )
      ) ||
      (github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'review-me') ||
      (
        (github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') &&
        contains(github.event.comment.body, inputs.review_macro || '@openhands-reviewer') &&
        (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'COLLABORATOR' || github.event.comment.author_association == 'MEMBER') &&
        github.event.issue.pull_request
      ) ||
      (
        github.event_name == 'pull_request_review' &&
        contains(github.event.review.body, inputs.review_macro || '@openhands-reviewer') &&
        (github.event.review.author_association == 'OWNER' || github.event.review.author_association == 'COLLABORATOR' || github.event.review.author_association == 'MEMBER')
      )
    runs-on: ubuntu-latest
    env:
      JOB_APP_ID: ${{ secrets.APP_ID }}
      JOB_APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Generate GitHub App Token
        id: generate-token
        # Attempting cache bust
        # Only run if App ID and Key are provided via secrets
        if: ${{ env.JOB_APP_ID != '' && env.JOB_APP_PRIVATE_KEY != '' }}
        uses: actions/create-github-app-token@v1
        with:
          permission-contents: read
          permission-issues: write
          permission-pull-requests: write
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Determine Auth Token
        id: determine-auth-token
        run: |
          if [ -n "${{ steps.generate-token.outputs.token }}" ]; then
            echo "Using GitHub App Token"
            echo "AUTH_TOKEN=${{ steps.generate-token.outputs.token }}" >> $GITHUB_ENV
          elif [ -n "${{ secrets.PAT_TOKEN }}" ]; then
            echo "Using PAT Token"
            echo "AUTH_TOKEN=${{ secrets.PAT_TOKEN }}" >> $GITHUB_ENV
          else
            echo "Using default GITHUB_TOKEN"
            echo "AUTH_TOKEN=${{ github.token }}" >> $GITHUB_ENV
          fi
      - name: Log Auth Token Source
        run: |
          if [ -n "${{ steps.generate-token.outputs.token }}" ]; then
            echo "Auth Token Source: GitHub App Token"
          elif [ -n "${{ secrets.PAT_TOKEN }}" ]; then
            echo "Auth Token Source: PAT Token"
          else
            echo "Auth Token Source: Default GITHUB_TOKEN"
          fi
      - name: Create requirements.txt and get branch SHA
        id: setup_reqs_and_sha
        env:
          # Use the determined auth token for git clone and ls-remote
          GIT_TOKEN: ${{ env.AUTH_TOKEN }}
        run: |
          echo "Using openhands-ai from remind101/OpenHands@feat/code-reviewer-impl"
          # Create a new requirements.txt locally within the workflow
          echo "git+https://${GIT_TOKEN}@github.com/remind101/OpenHands.git@feat/code-reviewer-impl#egg=openhands-ai" > /tmp/requirements.txt
          cat /tmp/requirements.txt

          echo "Fetching latest commit SHA for feat/code-reviewer-impl..."
          SHA=$(git ls-remote https://${GIT_TOKEN}@github.com/remind101/OpenHands.git refs/heads/feat/code-reviewer-impl | awk '{print $1}')
          echo "Latest SHA: $SHA"
          if [ -z "$SHA" ]; then
            echo "Error: Could not retrieve SHA for feat/code-reviewer-impl branch."
            exit 1
          fi
          echo "OPENHANDS_BRANCH_SHA=$SHA" >> $GITHUB_ENV

      - name: Cache pip dependencies
        if: |
          !(
            github.event.label.name == 'fix-me-experimental' ||
            (
              (github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') &&
              contains(github.event.comment.body, '@openhands-agent-exp')
            ) ||
            (
              github.event_name == 'pull_request_review' &&
              contains(github.event.review.body, '@openhands-agent-exp')
            )
          )
        uses: actions/cache@v4
        with:
          path: ${{ env.pythonLocation }}/lib/python3.12/site-packages/*
          key: ${{ runner.os }}-pip-openhands-resolver-${{ env.OPENHANDS_BRANCH_SHA }}
          restore-keys: |
            ${{ runner.os }}-pip-openhands-resolver-${{ env.OPENHANDS_BRANCH_SHA }}
            ${{ runner.os }}-pip-openhands-resolver-

      - name: Check required environment variables
        env:
          LLM_MODEL: ${{ secrets.LLM_MODEL || inputs.LLM_MODEL }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
          LLM_API_VERSION: ${{ inputs.LLM_API_VERSION }}
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          PAT_USERNAME: ${{ secrets.PAT_USERNAME }}
          APP_TOKEN_GENERATED: ${{ steps.generate-token.outputs.token && 'true' || 'false' }}
        run: |
          required_vars=("LLM_API_KEY")
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "Error: Required environment variable $var is not set."
              exit 1
            fi
          done

          # Check optional variables and warn about fallbacks
          if [ -z "$LLM_BASE_URL" ]; then
            echo "Warning: LLM_BASE_URL is not set, will use default API endpoint"
          fi

          # Check auth token source
          if [ "$APP_TOKEN_GENERATED" == "true" ]; then
            echo "Info: Using GitHub App Token for authentication."
          elif [ -n "$PAT_TOKEN" ]; then
            echo "Info: Using PAT_TOKEN for authentication."
          else
            echo "Warning: Neither App Token nor PAT_TOKEN is set, falling back to default GITHUB_TOKEN. This may have insufficient permissions."
          fi

          if [ -z "$PAT_USERNAME" ]; then
            echo "Warning: PAT_USERNAME is not set, will use openhands-agent"
          fi

      - name: Set environment variables and outputs
        id: set_vars # Add ID here
        env:
          REVIEW_BODY: ${{ github.event.review.body || '' }}
        run: |
          # All triggers for this workflow relate to a Pull Request
          echo "PR_NUMBER=${{ github.event.pull_request.number || github.event.issue.number }}" >> $GITHUB_ENV

          if [ -n "$REVIEW_BODY" ]; then
            echo "COMMENT_ID=${{ github.event.review.id || 'None' }}" >> $GITHUB_ENV
          else
            echo "COMMENT_ID=${{ github.event.comment.id || 'None' }}" >> $GITHUB_ENV
          fi

          echo "MAX_ITERATIONS=${{ inputs.max_iterations || 50 }}" >> $GITHUB_ENV
          # REVIEW_LEVEL and REVIEW_DEPTH are now passed directly to the script
          echo "SANDBOX_ENV_GITHUB_TOKEN=${{ env.AUTH_TOKEN }}" >> $GITHUB_ENV
          # Set SANDBOX_BASE_CONTAINER_IMAGE: Priority: inputs -> repo/org var -> empty string
          if [ -n "${{ inputs.base_container_image }}" ]; then
            echo "Using base_container_image from input: ${{ inputs.base_container_image }}"
            FINAL_BASE_IMAGE="${{ inputs.base_container_image }}"
          elif [ -n "${{ vars.SANDBOX_BASE_CONTAINER_IMAGE }}" ]; then
            echo "Using SANDBOX_BASE_CONTAINER_IMAGE from repo/org vars."
            FINAL_BASE_IMAGE="${{ vars.SANDBOX_BASE_CONTAINER_IMAGE }}"
          else
            echo "No base_container_image input or repo/org variable found. Defaulting to empty."
            FINAL_BASE_IMAGE=""
          fi
          echo "determined_base_image=$FINAL_BASE_IMAGE" >> $GITHUB_OUTPUT

      - name: Comment on PR with start message
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.AUTH_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ env.PR_NUMBER }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `[OpenHands](https://github.com/All-Hands-AI/OpenHands) started reviewing the PR! You can monitor the progress [here](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).`
            });

      - name: Install OpenHands
        id: install_openhands
        uses: actions/github-script@v7
        env:
          COMMENT_BODY: ${{ github.event.comment.body || '' }}
          REVIEW_BODY: ${{ github.event.review.body || '' }}
          LABEL_NAME: ${{ github.event.label.name || '' }}
          EVENT_NAME: ${{ github.event_name }}
        with:
          script: |
            const commentBody = process.env.COMMENT_BODY.trim();
            const reviewBody = process.env.REVIEW_BODY.trim();
            const labelName = process.env.LABEL_NAME.trim();
            const eventName = process.env.EVENT_NAME.trim();
            // Check conditions for experimental reviewer
            const isExperimentalLabel = labelName === "review-me-experimental"; // Example experimental label
            const isIssueCommentExperimental =
              (eventName === "issue_comment" || eventName === "pull_request_review_comment") &&
              commentBody.includes("@openhands-reviewer-exp"); // Example experimental macro
            const isReviewCommentExperimental =
              eventName === "pull_request_review" && reviewBody.includes("@openhands-reviewer-exp"); // Example experimental macro

            // Set output variable
            core.setOutput('isExperimental', isExperimentalLabel || isIssueCommentExperimental || isReviewCommentExperimental);

            // Perform package installation
            if (isExperimentalLabel || isIssueCommentExperimental || isReviewCommentExperimental) {
              console.log("Installing experimental OpenHands...");
              await exec.exec("python -m pip install --upgrade pip");
              await exec.exec("pip install git+https://github.com/all-hands-ai/openhands.git");
            } else {
              console.log("Installing from requirements.txt...");
              await exec.exec("python -m pip install --upgrade pip");
              await exec.exec("pip install -r /tmp/requirements.txt");
            }

      - name: Attempt to review PR
        env:
          GITHUB_TOKEN: ${{ env.AUTH_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.PAT_USERNAME || 'openhands-agent' }}
          GIT_USERNAME: ${{ secrets.PAT_USERNAME || 'openhands-agent' }}
          LLM_MODEL: ${{ secrets.LLM_MODEL || inputs.LLM_MODEL }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
          LLM_API_VERSION: ${{ inputs.LLM_API_VERSION }}
          PYTHONPATH: ""
          SANDBOX_BASE_CONTAINER_IMAGE: ${{ steps.set_vars.outputs.determined_base_image }}
        run: |
          echo "Using AUTH_TOKEN: $(echo $AUTH_TOKEN | cut -c 1-4)...$(echo $AUTH_TOKEN | rev | cut -c 1-4 | rev)"
          # Run from the workspace directory where the repo is checked out
          python -m openhands.code_reviewer.review_pr \
            --selected-repo ${{ github.repository }} \
            --pr-number ${{ env.PR_NUMBER }} \
            --max-iterations ${{ env.MAX_ITERATIONS }} \
            --comment-id ${{ env.COMMENT_ID }} \
            --output-file ./output/review_output_${{ env.PR_NUMBER }}.jsonl \
            --is-experimental ${{ steps.install_openhands.outputs.isExperimental }} \
            --review-level ${{ inputs.review_level || 'line' }} \
            --review-depth ${{ inputs.review_depth || 'deep' }} \
            --llm-num-retries 5 \
            --llm-temperature 2.0


      - name: Dump Docker Logs
        if: always() # Run even if the previous step failed
        run: |
          echo "Attempting to dump logs from runtime container..."
          CONTAINER_ID=$(docker ps -a --filter "name=openhands-runtime-" --format "{{.ID}}" | head -n 1)
          if [ -n "$CONTAINER_ID" ]; then
            echo "Found container ID: $CONTAINER_ID"
            docker logs "$CONTAINER_ID"
          else
            echo "No container found matching 'openhands-runtime-*'."
          fi

      - name: Check review result
        id: check_result
        run: |
          if grep -q '"success":true' ./output/review_output_${{ env.PR_NUMBER }}.jsonl; then
            echo "REVIEW_SUCCESS=true" >> $GITHUB_OUTPUT
          else
            echo "REVIEW_SUCCESS=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload review_output.jsonl as artifact
        uses: actions/upload-artifact@v4
        if: always() # Upload even if the previous steps fail
        with:
          name: reviewer-output
          path: ./output/review_output_${{ env.PR_NUMBER }}.jsonl
          retention-days: 30 # Keep the artifact for 30 days
      - name: Post Review Comments
        if: always() # Post comments even if the review script failed (to report failure)
        env:
          GITHUB_TOKEN: ${{ env.AUTH_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.PAT_USERNAME || 'openhands-agent' }}
          LLM_MODEL: ${{ secrets.LLM_MODEL || inputs.LLM_MODEL }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
          LLM_API_VERSION: ${{ inputs.LLM_API_VERSION }}
          PYTHONPATH: ""
          REVIEW_SUCCESS: ${{ steps.check_result.outputs.REVIEW_SUCCESS }}
        run: |
          python -m openhands.code_reviewer.post_review_comments \
            --output-file ./output/review_output_${{ env.PR_NUMBER }}.jsonl \
            --selected-repo ${{ github.repository }} \
            --pr-number ${{ env.PR_NUMBER }}

      # The post_review_comments script handles success/failure reporting.
